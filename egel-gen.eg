#!/usr/bin/env egel
# Egel combinator documentation extractor.

import "prelude.eg"
import "calculate.eg"
import "search.eg"
import "map.eg"
import "generator.eg"
import "dictionary.eg"
import "os.ego"
import "fs.ego"
import "random.ego"

using System
using List

# constants with all source code locations

val builtins = { 
        "system",
        "math",
        "string",
        "regex",
        "dict",
        "async",
        "eval",
        "runtime",
        "time",
        "ffi"
}

val dynamic = {
        "os",
        "fs",
        "random"
}

val preludes = {
        "prelude.eg",
        "calculate.eg",
        "search.eg",
        "generator.eg"
}

val modules = builtins ++ (dynamic ++ preludes)

# filter with a regex match against a documentation comment

val regex_combinator = Regex::compile "([^ ]*)::([^ ]*) ([^-]*)-(.*)"
val regex_local = Regex::compile "Local"

def combinator_docstring =
    [ L ->
        (if Regex::matches regex_local (to_text L) == {} then docstring L else none)
        |> [none -> none | L -> Regex::group regex_combinator L]
        |> [ {A,B,"",D} -> format " + `{}::{}` - {}\n\n" A B D 
           | {A,B,C,D} -> format " + `{}::{}` *{}* - {}\n\n" A B (String::trim C) D 
           | _ -> "" ] ]

# generate a short markdown document

def module_to_md =
    [N ->
        query_modules |> filter [M -> query_module_name M == N] |> head
        |> [M -> format "## {}\n\n" N + format "{}\n\n" (docstring M) + reduce (+) (map combinator_docstring (query_module_exports M))] ]

def main =
    print "# Egel interpreter builtin combinators\n\n";
    map module_to_md modules |> map [X -> print X];
    none

