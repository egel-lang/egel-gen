#!/usr/bin/env egel
# Egel combinator documentation extractor.

import "prelude.eg"
import "os.ego"
import "fs.ego"
import "regex.ego"

using System
using List

# constants with all source code locations

val builtins = { 
        "egel/src/builtin_system.cpp",
        "egel/src/builtin_math.cpp",
        "egel/src/builtin_eval.cpp",
        "egel/src/builtin_string.cpp",
        "egel/src/builtin_eval.cpp",
        "egel/src/builtin_thread.cpp",
        "egel/src/builtin_process.cpp"
}

val modules = {
        "egel/lib/os/os.cpp",
        "egel/lib/fs/fs.cpp",
        "egel/lib/regex/regex.cpp",
        "egel/lib/random/random.cpp"
}

val preludes = {
        "egel/include/prelude.eg",
        "egel/include/calculate.eg",
        "egel/include/search.eg"
}

val sources = builtins ++ (modules ++ preludes)

# read in sources

data source

def file_check =
    [ FN -> 
#        print (format "checking file: {}\n" FN);
        if OS::exists FN 
        then none # print (format "reading file {}\n" FN) 
        else throw (format "didn't find file {}" FN) ]

def file_readlines =
    [ FS ->
        let L = OS::read_line FS in
        if OS::eof FS then nil else cons L (file_readlines FS) ]

def file_input =
    [ FN ->
        file_check FN;
        source FN (file_readlines (OS::open FN)) ]

# filter with a regex match against a documentation comment

val regex_comment = Regex::compile "(?:(?: *)|(?:\\/\\/))##.*"

def filter_doc =
    [ (source FN LL) ->
        source FN (filter (Regex::match regex_comment) LL) ]

# extract combinator declarations

data comb

val regex_combinator = Regex::compile "(?:(?: *)|(?:\\/\\/))## +([^ ]*)::([^ ]*) (.*) - (.*)"

def line_to_comb =
    [ L ->
        let CC = Regex::group regex_combinator L in
        [ {A,B,C,D} -> comb A B C D | _ -> comb ] CC ]

def source_to_comb =
    [ (source FN LL) -> source FN (map line_to_comb LL) ]

# generate a short markdown document

def comb_to_md =
    [ (comb A B C D) -> print (format " + `{}::{}` *{}* - {}\n\n" A B C D)
    | _ -> none ]

def source_to_md =
    [ (source FN CC) ->
        print (format "## <{}>\n\n" FN);
        map comb_to_md CC ]

def sources_to_md =
    [ CC -> 
        print "# Egel interpreter builtin combinators\n\n";
        map source_to_md CC;
        none ]

# tying it all together

def main =
    let DD = map file_input sources in
    let DD = map filter_doc DD in
    let CC = map source_to_comb DD in
        sources_to_md CC
